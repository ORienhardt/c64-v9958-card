; *****************************************************************************
;         C64-V9958-Card Yamaha V9938-V9958 C64-Mode7 / Vossi 07/2024
; *****************************************************************************
!cpu 6502	; 6502, 6510, 65c02, 65816
!ct scr		; standard text/char conversion table -> Screencode (pet = PETSCII, raw)
; VDP write speed: Reg->Reg(Port 1,2,3) 2us, Reg->VRAM 5us, VRAM->VRAM 5us, VRAM->Reg 5us

; switches
PAL = 1		; selects V9938/58 PAL RGB-output, NTSC has a higher picture
!to "starwars.prg", cbm
; constants
FILL			= $ff		; fills free memory areas with $00
VDPREG1			= $00		; VDP reg 1 value (mode bits M1+M2, screen disabled)
VDPREG18		= $0d		; VDP reg 18 value (V/H screen adjust, $0d = Sony PVM 9")
!ifdef PAL{VDPREG9	= $82		; VDP reg 9 value ($00 = NTSC, $02 = PAL)
	}else {VDPREG9	= $80}
; ****************************************** ADDRESSES ********************************************
VDP			= $df00		; Port#0 RamWrite, #1 Control, #2 Palette, #4 RamRead, #5 Status
!addr VDPRamWrite	= VDP
!addr VDPControl	= VDP+1
!addr VDPPalette	= VDP+2
!addr VDPIndirect	= VDP+3
!addr VDPRamRead	= VDP+4
!addr VDPStatus		= VDP+5
; ****************************************** ZERO PAGE ********************************************
!zone zeropage
!addr counter		= $fb		; 8bit counter
!addr counter2		= $fc		; 8bit counter
!addr pointer		= $fd		; pointer
; ******************************************* MACROS **********************************************
; macros
!macro st16i .a, .v{		; *** store 16bit immidiate to address
	lda # <.v
	sta .a
	lda # >.v
	sta .a+1
}
!macro VdpSetReg .r{		; *** set VDP Register
	sta VDPControl			; first writes data in A to control port #1
	lda #.r | $80			; writes register no. with bit#7 = 1 to Port #1
	sta VDPControl
}
!macro VdpWriteAddress{		; *** set VDP write vram address-pointer to AAXX
	stx VDPControl
	ora #$40			; bit#6 = 1 write
	sta VDPControl
} 
; **************************************** BASIC LOADER *******************************************
!initmem FILL
*= $0801
	!byte $0b,$08,$0a,$00,$9e,$32,$30,$36,$31,$00,$00,$00
	; sys2061
; ***************************************** ZONE MAIN *********************************************
!zone main
start:					; *** main code starts here ***	
	ldx #0
msglp:	lda message,x
	jsr $ffd2			; char out
	beq demo
	inx
	bne msglp

demo:	jsr VDPInit
					; *** display bitmap
	lda #$00
	tax
	+VdpWriteAddress		; set VRAM to start
	+st16i pointer, BitmapData+2	; set pointer to bitmap data
; display pictures
	lda #2
	sta counter2			; copy 2x pictures

	lda BitmapData+1
	sta counter			; set line counter to y-resolution of bitmap

--	ldx BitmapData			; x resolution
	ldy #0
; left
-	lda (pointer),y
	sta VDPRamWrite
	iny
	dex
	bne -
	ldx BitmapData			; x resolution
	ldy #0
; right
-	lda (pointer),y
	sta VDPRamWrite
	iny
	dex
	bne -	
; next line	
	dec counter
	beq +				; last Bitmap line reached
	lda pointer
	clc
	adc BitmapData
	sta pointer
	bcc --
	inc pointer+1
	bcs --				; always
; lower half
+	+st16i pointer, BitmapData+2	; set pointer to bitmap data
	dec counter2			; 2 times
	bne --	

show:	jsr VDPOn
	rts
; ************************************** ZONE SUBROUTINES *****************************************
!zone subroutines
; init vdp
VDPInit:
	lda #0
	tax
	+VdpSetReg 17			; write VDP regs fast indirect
vinilp:	lda VdpInitData,x
	sta VDPIndirect
	inx
	cpx #VdpInitDataEnd-VdpInitData
	bne vinilp
	
	lda #VDPREG18
	+VdpSetReg 18			; set register 18 V/H display adjust L 7-1,0,f-8 R
; clear 128kB VRAM (in mode 6/7 complete autoincrement)
	ldy #$00
	tya
	tax
	+VdpWriteAddress		; set VRAM write address to $AAXX = $0000, Bank Reg already 0
	lda #$2				; 2x $10000 VRAM to clear
	sta counter			; A16 counter
	tya				; VRAM init value =$00
	; x, y already 0
viramlp:sta VDPRamWrite
	inx
	bne viramlp
	iny
	bne viramlp
	dec counter			; dec A16 counter
	bne viramlp
	; y already 0
	tya				; a=0
	+VdpSetReg 14			; set VRAM bank register to 0
	rts
; -------------------------------------------------------------------------------------------------
; display on
VDPOn:					; *** enable screen ***
	lda #VDPREG1 | $40		; set mode reg 1 (M1+M2), bit#6 = 1 enables screen
	+VdpSetReg 1
	rts
; ****************************************** ZONE DATA ********************************************
!zone data
message:!pet $d, "v9958-cart c64-demo", $d, "(c) vossi 07/2024 baleares", 0
; vdpdata
VdpInitData:	; graphics7-mode
	!byte $0e,$00,$1f,$80,$00,$f7,$1e,$00,$08,VDPREG9,$00,$01,$10,$0f,$00
	; reg  0: $0e mode control 1: graphics mode 7 (bit#1-3 = M3 - M5)
	; reg  1: $00 mode control 2: graphics mode 7 (bit#3-4 = M2 - M1, #6 = 1: display enable)
	; reg  2: $1f BitmapData table base address $0000 (bit#5 * $10000, bit#0-4 = 1)
	; reg  3: $ff color table base address $FFC0 (* $40)
	; reg  4: $00 pattern (character) generator table base address $0000 (* $800)
	; reg  5: $f7 sprite attribute table base address $FA00 (* $80)
	; reg  6: $1e sprite pattern (data) generator base address = $F000 (* $800)
	; reg  7: $00 8bit backdrop color 
	; reg  8: $08 refresh bit#3 = 1: 64k VRAM chips
	; reg  9: $80 bit#1 = NTSC/PAL, #2 = EVEN/ODD, #3 = interlace, #7 = 192/212 lines
	; reg 10: $03 color table base address $F800 bit#0-2 = A14-A16
	; reg 11: $01 sprite attribute table base address $FA00 bit#0-1 = A15-A16
	; reg 12: $10 text/background blink color
	; reg 13: $0f blink periods ON/OFF - 0f = blinking off
	; reg 14: $00 VRAM write addresss bit#0-2 = A14-A16
VdpInitDataEnd:

BitmapData:
	!binary "starwars.rgb"